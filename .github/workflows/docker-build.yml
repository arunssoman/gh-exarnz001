name: Docker Image Build and Push

on:
  push:
    branches:
      - main # or your default branch (e.g., master)
    paths: # Trigger only when Dockerfile or its artifacts change
      - 'Dockerfile'
      - 'start.sh' # Assuming start.sh is an artifact used in your image
      - 'your-app-code-folder/**' # Include your application code directory if it's part of the build context

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract Docker image metadata
        id: meta # Giving this step an ID to reference its outputs later
        uses: docker/metadata-action@v5
        with:
          images: arunssoman/exarnz001
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }} # Tag 'latest' only on pushes to the default branch
            type=sha,format=long # Tag with the full Git commit SHA
            type=sha,format=short # Tag with a short Git commit SHA

      - name: Build Docker image
        id: build-image # Giving this step an ID
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false # Only build, do not push yet
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Push Docker image to Docker Hub (if build is successful)
        if: success() # This condition ensures this step runs only if the previous step (build-image) was successful
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: | # Example: pass version as a build argument
            BUILD_VERSION=${{ steps.meta.outputs.version }}
